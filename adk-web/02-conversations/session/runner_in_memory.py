from google.genai import types
from google.adk.sessions import Session, BaseSessionService, InMemorySessionService
from google.adk.sessions import DatabaseSessionService
from google.adk.runners import Runner, RunConfig, StreamingMode

from session import agent

# Set up the session service to use in-memory storage
session_service = InMemorySessionService()

initial_state = {"initial_key": "initial_value"}

#------------------------------------------------------------

async def run_agent( app_name: str,
                     user_id: str,
                     session_id: str):
    """
    Initializes and runs the agent with a sample query.
    Parameters:
        app_name (str): The name of the application.
        user_id (str): The ID of the user.
        session_id (str): The ID of the session.
        session_service (BaseSessionService): The session service.
    Returns None.
    
    """

    # Check if a session already exists for the user
    existing_sessions = session_service.list_sessions(
        app_name=app_name,
        user_id=user_id,
    )

    # If a session exists, use it; otherwise, create a new one
    if existing_sessions and len(existing_sessions.sessions) > 0:
        session_id = existing_sessions.sessions[0].id # Use the most recent session
        print(f"Session id for existing session: {session_id}")
    else:
        # Create a new session with initial state
        new_session = session_service.create_session(
            app_name=app_name,
            user_id=user_id,
            state=initial_state,
        )
        session_id = new_session.id
        print(f"Created new session: {session_id}")

    # Create a new runner instance
    runner = Runner(agent=agent.root_agent,
                    app_name=app_name,
                    session_service=session_service)
    
    # Set up the run configuration
    run_config = RunConfig(
        response_modalities = ["TEXT"],
        streaming_mode= StreamingMode.SSE,
        max_llm_calls = 10
    )

    # Main loop to interact with the user
    # The user can type "exit" to terminate the conversation
    while True:

        # Get user input
        # Note: This is a blocking call. You can replace it with an async input method if needed.
        user_input = input("You: ")
        if user_input.lower() == "exit" or user_input.lower() == "quit":
            break

        content = types.Content(role='user', parts=[types.Part(text=user_input)])

        # Run the agent with the user input
        events = runner.run_async(user_id=user_id,
                                session_id=session_id,
                                new_message=content,
                                run_config=run_config)

        # Process the events generated by the agent
        # This is where the agent's response will be printed
        # and the session properties will be examined
        async for event in events:
            await asyncio.create_task(print_session(app_name = app_name,
                                                    user_id = user_id,
                                                    session_id = session_id,
                                                    session_service = session_service))

            if event.is_final_response():
                final_response = event.content.parts[0].text            
                print("Assistant: " + final_response)

#------------------------------------------------------------

async def print_session(app_name: str,
                        user_id: str,
                        session_id: str,
                        session_service: BaseSessionService):
    """
    Retrieves the session from the session service.
    Parameters:
        app_name (str): The name of the application.
        user_id (str): The ID of the user.
        session_id (str): The ID of the session.
        session_service (BaseSessionService): The session service.
    Returns None.
    """

    session  = session_service.get_session(app_name=app_name,
                                user_id=user_id,
                                session_id=session_id,)
    

    print(f"--- Examining Session Properties ---")
    print(f"ID (`id`):                {session.id}")
    print(f"Application Name (`app_name`): {session.app_name}")
    print(f"User ID (`user_id`):         {session.user_id}")
    print(f"State (`state`):           {session.state}") # Note: Only shows initial state here
    print(f"Events (`events`):         {session.events}") # Initially empty
    print(f"Last Update (`last_update_time`): {session.last_update_time:.2f}")
    print(f"---------------------------------")

#------------------------------------------------------------

if __name__ == "__main__":
    import asyncio
    import argparse

    print("Running the agent...")

    parser = argparse.ArgumentParser(description="Run the ADK agent with a user query.")
    parser.add_argument("--app_name",type=str,help="The application name of this agent.",)
    parser.add_argument("--user_id",type=str,help="The user name interacting with this agent",)
    parser.add_argument("--session_id",type=str,help="The session id to identify the session of this agent",)
    args = parser.parse_args()


    asyncio.run(run_agent(app_name = args.app_name, 
                                user_id = args.user_id, 
                                session_id = args.session_id,))
    